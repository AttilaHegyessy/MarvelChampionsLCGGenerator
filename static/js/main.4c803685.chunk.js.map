{"version":3,"sources":["Resources/mc_logo.png","View/NumberOfPlayersSelector.tsx","View/HeroAspectPair.tsx","View/PlayerDisplay.tsx","View/Scenario.tsx","Functionality/Randomizer.js","Data/HeroList.js","Data/AspectList.js","Data/VillainList.js","Data/ModularSetList.js","Functionality/Generator.js","View/PlayerDetailsModal.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","NumberOfPlayersSelector","numberOfPlayers","onNumberOfPlayersSelected","Col","className","Row","ButtonGroup","size","toggle","map","option","idx","ToggleButton","key","type","variant","name","value","checked","onChange","e","selectedValue","currentTarget","HeroAspectPair","hero","aspects","aspect","PlayerDisplay","heroAspectPairs","undefined","length","pair","index","Card","style","width","Header","as","Body","Text","Scenario","scenario","villain_name","modularSets","modularSet","getRandom","array","numberOfItems","shuffle","slice","temporaryValue","randomIndex","currentIndex","Math","floor","random","HeroList","numberOfAspects","AspectList","VillainList","numberOfModularSets","ModularSetList","addedHeroes","addedAspects","generatePlayer","includes","push","generatePlayers","numOfPlayers","players","i","PlayerDetailsModal","isVisible","handleClose","Modal","show","onHide","closeButton","Title","Form","Group","Label","Control","min","max","Footer","Button","App","useState","setHeroAspectPairs","setScenario","setNumberOfPlayers","isPlayerDetailsModalOpen","setPlayerDetailsModalOpen","Container","Image","src","logo","alt","onClick","villain","generateScenario","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c803685.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mc_logo.84e9023b.png\";","import React from \"react\";\nimport { ButtonGroup, ToggleButton, Row, Col } from \"react-bootstrap\";\n\ninterface INumberOfPlayersSelector {\n  numberOfPlayers: number;\n  // eslint-disable-next-line no-unused-vars\n  onNumberOfPlayersSelected: (value: number) => void;\n}\n\nexport default function NumberOfPlayersSelector({\n  numberOfPlayers,\n  onNumberOfPlayersSelected,\n}: INumberOfPlayersSelector) {\n  const options = [1, 2, 3, 4];\n\n  return (\n    <Col>\n      <h5 className=\"number-of-players-label\">Number of players</h5>\n      <Row>\n        <ButtonGroup size=\"lg\" toggle>\n          {options.map((option, idx) => (\n            <ToggleButton\n              key={idx}\n              type=\"radio\"\n              variant=\"secondary\"\n              name=\"radio\"\n              value={option}\n              checked={numberOfPlayers === option}\n              onChange={(e) => {\n                const selectedValue: number = +e.currentTarget.value;\n                onNumberOfPlayersSelected(selectedValue);\n              }}\n            >\n              {option}\n            </ToggleButton>\n          ))}\n        </ButtonGroup>\n      </Row>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport IHeroAspectPair from \"../Models/IHeroAspectPair\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport default function HeroAspectPair({ hero, aspects }: IHeroAspectPair) {\n  return (\n    <Row>\n      <Col>{hero}</Col>\n      <Col>\n        {aspects.map((aspect) => (\n          <Row key={aspect}>{aspect}</Row>\n        ))}\n      </Col>\n    </Row>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport IHeroAspectPair from \"../Models/IHeroAspectPair\";\nimport HeroAspectPair from \"./HeroAspectPair\";\n\ninterface IPlayerDisplay {\n  heroAspectPairs: IHeroAspectPair[];\n}\n\nexport default function PlayerDisplay({ heroAspectPairs }: IPlayerDisplay) {\n  return heroAspectPairs.length === undefined ? null : (\n    <>\n      {heroAspectPairs.map((pair, index) => (\n        <Card style={{ width: \"500px\" }} key={`${pair.hero}${index}`}>\n          <Card.Header as=\"h5\">Player {index + 1}</Card.Header>\n          <Card.Body>\n            <Card.Text>\n              <HeroAspectPair hero={pair.hero} aspects={pair.aspects} />\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport IScenario from \"../Models/IScenario\";\nimport { Card, Col, Row } from \"react-bootstrap\";\n\ninterface IScenarioProp {\n  scenario?: IScenario;\n}\n\nexport default function Scenario({ scenario }: IScenarioProp) {\n  return scenario === undefined ? null : (\n    <>\n      <Card style={{ width: \"500px\" }}>\n        <Card.Header as=\"h5\">Villain</Card.Header>\n        <Card.Body>\n          <Card.Text>\n            <Row>\n              <Col>{scenario.villain_name}</Col>\n            </Row>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n      {scenario.modularSets.length > 0 && (\n        <Card style={{ width: \"500px\" }}>\n          <Card.Header as=\"h5\">Modular sets</Card.Header>\n          <Card.Body>\n            {scenario.modularSets.map((modularSet) => (\n              <Card.Text key={modularSet}>\n                <Row>\n                  <Col>{modularSet}</Col>\n                </Row>\n              </Card.Text>\n            ))}\n          </Card.Body>\n        </Card>\n      )}\n    </>\n  );\n}\n","export function getRandom(array, numberOfItems = 1) {\n    return shuffle(array).slice(0, numberOfItems);\n}\n\n//https://stackoverflow.com/a/2450976\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}","export const HeroList =[\n    {name: 'Black Panther', numberOfAspects: 1 },\n    {name: 'Black Widow', numberOfAspects: 1 },\n    {name: 'Captain America', numberOfAspects: 1 },\n    {name: 'Captain Marvel', numberOfAspects: 1 },\n    {name: 'Doctor Strange', numberOfAspects: 1 },\n    {name: 'Hawkeye', numberOfAspects: 1 },\n    {name: 'Hulk', numberOfAspects: 1 },\n    {name: 'Iron Man', numberOfAspects: 1 },\n    {name: 'Ms. Marvel', numberOfAspects: 1 },\n    {name: 'She-Hulk', numberOfAspects: 1 },\n    {name: 'Spider-Man', numberOfAspects: 1 },\n    {name: 'Spider-Woman', numberOfAspects: 2 },\n    {name: 'Thor', numberOfAspects: 1 }]","export const AspectList = [\n    'Aggression',\n    'Justice',\n    'Leadership',\n    'Protection']","export const VillainList = [\n    { name: 'Rhino', numberOfModularSets: 1 },\n    { name: 'Klaw', numberOfModularSets: 1 },\n    { name: 'Ultron', numberOfModularSets: 1 },\n    { name: 'Risky Business', numberOfModularSets: 1 },\n    { name: 'Mutagen Formula', numberOfModularSets: 1 },\n    { name: 'Wrecking Crew', numberOfModularSets: 0 },\n    { name: 'Crossbones', numberOfModularSets: 3 },\n    { name: 'Absorbing Man', numberOfModularSets: 1 },\n    { name: 'Taskmaster', numberOfModularSets: 1 },\n    { name: 'Zola', numberOfModularSets: 1 },\n    { name: 'Red Skull', numberOfModularSets: 2 },\n    { name: 'Kang', numberOfModularSets: 1 }];","export const ModularSetList = [\n    'Bomb Scare',\n    'Masters Of Evil',\n    'Under Attack',\n    'Legions Of Hydra',\n    'The Doomsday Chair',\n    'Goblin Gimmicks',\n    'A Mess Of Things',\n    'Power Drain',\n    'Running Interference',\n    'Hydra Assault',\n    'Hydra Patrol',\n    'Weapon Master',\n    'Temporal',\n    'Anachronauts',\n    'Master of Time'\n  ]","import { getRandom } from './Randomizer';\nimport { HeroList } from '../Data/HeroList';\nimport { AspectList } from '../Data/AspectList'\nimport { VillainList } from '../Data/VillainList';\nimport { ModularSetList} from '../Data/ModularSetList';\n\nlet addedHeroes = [];\nlet addedAspects = [];\n\nconst reset = () => {\n    addedHeroes = [];\n    addedAspects = [];\n}\n\nconst generatePlayer = () => {\n    let hero = getRandom(HeroList)[0];\n\n    while (addedHeroes.includes(hero.name)) {\n        hero = getRandom(HeroList)[0];\n    }\n\n    let aspects = getRandom(AspectList, hero.numberOfAspects);\n    while (addedAspects.includes(aspects[0])) {\n        aspects = getRandom(AspectList, hero.numberOfAspects);\n    }\n\n    addedHeroes.push(hero.name);\n    addedAspects.push(aspects[0])\n    \n    return {hero: hero.name, aspects: aspects };\n}\n\nexport const generatePlayers = (numOfPlayers) => {\n    reset();\n    let players = [];\n    \n    for (let i = 0; i < numOfPlayers; ++i) {\n        players.push(generatePlayer());\n    }\n\n    return players;\n}\n\nexport const generateScenario = () => {\n    let villain = getRandom(VillainList)[0];\n\n    return {villain_name: villain.name, modularSets: getRandom(ModularSetList, villain.numberOfModularSets)};\n}\n","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\ninterface IPlayerDetailsModal {\n  isVisible: boolean;\n  handleClose: () => void;\n}\n\nexport default function PlayerDetailsModal({\n  isVisible,\n  handleClose,\n}: IPlayerDetailsModal) {\n  return (\n    <Modal show={isVisible} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Details</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Form>\n          <Form.Group>\n            <Form.Label>\n              Number of additional encounter sets (in addition to\n              standard/expert)\n            </Form.Label>\n            <Form.Control type=\"number\" min={0} max={5} />\n          </Form.Group>\n        </Form>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button variant=\"secondary\">Close</Button>\n        <Button variant=\"primary\">Save changes</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport IHeroAspectPair from \"./Models/IHeroAspectPair\";\nimport IScenario from \"./Models/IScenario\";\n\nimport NumberOfPlayerSelector from \"./View/NumberOfPlayersSelector\";\nimport PlayerDisplay from \"./View/PlayerDisplay\";\nimport Scenario from \"./View/Scenario\";\nimport { generatePlayers, generateScenario } from \"./Functionality/Generator\";\nimport logo from \"./Resources/mc_logo.png\";\nimport \"./App.css\";\nimport { Button, Container, Image, Row } from \"react-bootstrap\";\nimport PlayerDetailsModal from \"./View/PlayerDetailsModal\";\n\nexport default function App() {\n  const [heroAspectPairs, setHeroAspectPairs] = useState<IHeroAspectPair[]>([]);\n  const [scenario, setScenario] = useState<IScenario>();\n  const [numberOfPlayers, setNumberOfPlayers] = useState(1);\n  const [isPlayerDetailsModalOpen, setPlayerDetailsModalOpen] = useState(false);\n\n  function generate() {\n    setHeroAspectPairs(generatePlayers(numberOfPlayers));\n    setScenario(generateScenario());\n  }\n\n  function reset() {\n    setHeroAspectPairs([]);\n    setScenario(undefined);\n    setNumberOfPlayers(1);\n  }\n\n  return (\n    <Container>\n      <PlayerDetailsModal\n        isVisible={isPlayerDetailsModalOpen}\n        handleClose={() => setPlayerDetailsModalOpen(false)}\n      />\n      {/* <Row>\n        <Button onClick={() => setPlayerDetailsModalOpen(true)}>\n          Open Modal\n        </Button>\n      </Row> */}\n      <Image\n        src={logo}\n        alt=\"Marvel Champions Logo\"\n        className=\"mc-main-logo\"\n        onClick={() => reset()}\n      />\n      <Row className=\"row-with-margin\">\n        <NumberOfPlayerSelector\n          numberOfPlayers={numberOfPlayers}\n          onNumberOfPlayersSelected={(e: number) => setNumberOfPlayers(e)}\n        />\n      </Row>\n      <Row className=\"row-with-margin\">\n        <Button onClick={generate}>Generate!</Button>\n      </Row>\n      <PlayerDisplay heroAspectPairs={heroAspectPairs} />\n      <Scenario scenario={scenario} />\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}